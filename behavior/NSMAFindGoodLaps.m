function [startgoodlaps,stopgoodlaps,laps]=NSMAFindGoodLaps(ts,V_rest,laps,edgethresh,completeprop,plotlaps,posbins)
% [startgoodlaps, stopgoodlaps, laps] = 
%        FindGoodLaps(V_rest,laps,edgethresh,completeprop,plotlaps,posbins)
%
% find and eliminate laps which have too many NaNs (because rat was off 
% track), and parts of laps where rat turns around in middle of track
% 
% inputs: V_rest: V coordinates of rat with off track periods masked out 
%                 (as NaNs)
%         laps: struct with lap start and end times (generated by
%               FindLaps_Horseshoe)
%         edgethresh: threshold for detection of a turn around point 
%                     (proportion of length of track) (default = 0.1)
%         completeprop: the amount of lap that can be missing (NaNs) to
%                       still be considered a lap (default = 0.2).
%         plotlaps: flag for making plots of each lap, and pause for user
%                   to hit key to continue (default = 1)
%         posbins: number of bins to divide the track into to determine
%                  position coverage percentage; at 60frames/s want at 
%                  least 2cm/bin (default = 50bins; this works for 100+ cm 
%                  track, as long as V_rest is in cm)
% outputs: startgoodlaps, stopgoodlaps: start and stop times of good lap 
%                                       periods
%          laps: a new laps struct, with the bad laps removed
%
% ZN 04/2011

if nargin==3
    edgethresh=0.1;
    completeprop=0.2;
    plotlaps=0;
    posbins=50;
elseif nargin==4
    completeprop=0.2;
    plotlaps=1;
    posbins=50;
elseif nargin==5
    plotlaps=1;
    posbins=50;
elseif nargin==6
    posbins=50;
end

if edgethresh>1      % in case edgethresh is input as a percentage instead of a proportion
    edgethresh=edgethresh/100;
end
if completeprop>1      % in case completeprop is input as a percentage instead of a proportion
    completeprop=completeprop/100;
end

bottomend=min((V_rest));
topend=max((V_rest));
bins=bottomend:(topend-bottomend)/posbins:topend;
delta=(topend-bottomend)*edgethresh;     % threshold for peak/trough detection
startgoodlaps=[];
stopgoodlaps=[];
if plotlaps
    a=figure;
end
l=1;
while l<=length(laps) %length(laps)
    % select out just this lap
    if l==length(laps)
        endoflap=ts(end);
    else
        endoflap=laps(l+1).start_ts;
    end
%     Vlap=Restrict(V_rest, laps(l).start_ts, endoflap);
%     t=Range(Vlap);
%     v=Data(Vlap);
    
   v= V_rest(find(ts==laps(l).start_ts):find(ts==endoflap));
      t= ts(find(ts==laps(l).start_ts):find(ts==endoflap));

    
    if plotlaps
        figure(a); subplot(1,5,1:4); plot(t,v,'k-')
        if length(t)>1
            axis([t(1) t(end) bottomend topend])
        end
        title(['lap # ', num2str(l), ': ', num2str(laps(l).direction)])
        xlabel('Time')
        ylabel('Position')
    end
    
    % find turn around points during this lap
    lookformax=laps(l).direction==1;
    [peak,trough]=peakdetz(v, delta, lookformax, 0);
    if plotlaps
        hold on;
        if ~isempty(peak)
            plot(t(peak(:,1)), peak(:,2), 'r.')
        end
        if ~isempty(trough)
            plot(t(trough(:,1)), trough(:,2), 'b.')
        end
    end
    
    if lookformax
    % find the direct path from bottomend to topend (or mark lap for
    % deleting if the turn around points are not in those ranges)
        if ~isempty(trough)
            % find the last trough in range of bottomend (start of lap)
            [gt,blah]=size(trough);
            while gt>0 && trough(gt,2)>=2*delta+bottomend
                gt=gt-1;
            end
            % assign the next peak after that trough as the end of the lap
            % (or mark lap for deleting, if that peak is not at topend)
            if gt==0
                if peak(1,2)>topend-2*delta
                    t=t(1:peak(1,1));
                    v=v(1:peak(1,1));
                else
                    % this marks the lap for deleting
                    t=t(1:5);
                    v=v(1:5);
                    if plotlaps
                        title('continous run does not reach end of track')
                    end
                end
            else
                [et,blah]=size(peak);
                if gt+1>et
                    gt=0;
                    t=t(1:2);
                    v=v(1:2);
                    if plotlaps
                        title('last start of run is past last peak')
                        % this happens if the lap never leaves the start of lap region
                    end
                else
                    t=t(trough(gt,1):peak(gt+1,1));
                    v=v(trough(gt,1):peak(gt+1,1));
                end
            end
            if plotlaps
                plot(t, v, 'g--')
            end
            
        else % if ~isempty(trough)
        % make sure peak exists and is in range of topend
            if isempty(peak)
                if plotlaps
                    title('Peak does not exist')
                end
                if length(t)>2
                    t=t(1:2);
                    v=v(1:2);
                end
            elseif peak(1,2)<topend-2*delta
                % this marks the lap for deleting
                if length(t)>5
                    t=t(1:5);
                    v=v(1:5);
                end
                if plotlaps
                    title('run does not end at end of track ')
                end
            end
        end
    else % if lookformax
    % find the direct path from topend to bottomend (or mark lap for
    % deleting if the turn around points are not in those ranges)
        if ~isempty(peak)
        % find the last peak in range of topend (start of lap)
            [gt,blah]=size(peak);
            while gt>0 && peak(gt,2)<=topend-2*delta
                gt=gt-1;
            end
            % assign the next trough after that peak as the end of the lap
            % (or mark lap for deleting, if that trough is not at bottomend)
            if gt==0
                if trough(1,2)<bottomend+2*delta
                    t=t(1:trough(1,1));
                    v=v(1:trough(1,1));
                else
                    % this marks the lap for deleting
                    t=t(1:5);
                    v=v(1:5);
                    if plotlaps
                        title('continous run does not reach end of track')
                    end
                end
            else
                [et,blah]=size(trough);
                if gt+1>et
                    t=t(1:2);
                    v=v(1:2);
                    gt=0;
                    if plotlaps
                        title('last start of run is past last trough')
                        % this happens if the lap never leaves the start of lap region                        
                    end
                else
                t=t(peak(gt,1):trough(gt+1,1));
                v=v(peak(gt,1):trough(gt+1,1));
                end
            end
            if plotlaps
                plot(t, v, 'g--')
            end
        else % if ~isempty(peak)
            % make sure trough exists and is in range of bottomend
            if isempty(trough)
                if plotlaps
                    title('Through does not exist')
                end
                if length(t)>2
                    t=t(1:2);
                    v=v(1:2);
                end
            elseif trough(1,2)>bottomend+2*delta
                % this marks the lap for deleting
                if length(t)>5
                    t=t(1:5);
                    v=v(1:5);
                end
                if plotlaps
                    title('run does not end at end of track ')
                end
            end
        end
    end % else looformax
        
    vcovered=hist(v,bins);
    if plotlaps
        subplot(1,5,5); plot(vcovered, bins,'k-')
        histpeak=max([vcovered,1]);
        axis([0 histpeak bottomend topend])
        xlabel('frames spent in position')
    end
    
    if length(v)<3
    % eliminate the lap if it is non-existent (as is sometimes the case for lap 1)
        laps(l)=[];
        if plotlaps
            title(['Non-existent lap. ', num2str(length(laps)), ' laps left.'])
        end
    % eliminate the lap if >completeprop of it is NaNs or if it has been marked for
    % deleting above
    elseif length(v)<6 || sum(vcovered==0)>completeprop*posbins
        laps(l)=[];
        % remove the other lap from the lap pair
        if mod(l,2)==0
            % delete previous lap from laps
            laps(l-1)=[];
            if plotlaps
                title(['Deleting this and the previous lap. ', num2str(length(laps)), ' laps left.'])
            end
            % change goodlaps markers to delete previous lap from laps
            if ~isempty(stopgoodlaps)
                if ~exist('lastlapend', 'var') || startgoodlaps(end)>lastlapend
                    startgoodlaps(end)=[];
                    stopgoodlaps(end)=[];
                else
                    stopgoodlaps(end)=lastlapend;
                end
            end
            l=l-1;
        elseif l<=length(laps) && l>1
            % delete next lap from laps
            laps(l)=[];
            if plotlaps
                title(['Deleting this and the next lap. ', num2str(length(laps)), ' laps left.'])
            end
        else
            if plotlaps
                title(['Deleting this lap. ', num2str(length(laps)), ' laps left.'])
            end
        end
    else % if lap is good
        % store last lap end just in case have to delete this lap with next lap
        if ~isempty(stopgoodlaps)
            lastlapend=stopgoodlaps(end);
        end
        % add this lap to goodlaps
        if ~isempty(stopgoodlaps) && stopgoodlaps(end)==t(1)
            stopgoodlaps(end)=t(end);
        else
            startgoodlaps=[startgoodlaps; t(1)];
            stopgoodlaps=[stopgoodlaps; t(end)];
        end
        l=l+1;
    end
    if plotlaps
        drawnow
%         pause
        hold off;
    end
end
